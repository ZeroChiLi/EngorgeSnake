C51 COMPILER V9.01   SNAKE                                                                 05/24/2017 23:31:06 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE SNAKE
OBJECT MODULE PLACED IN Snake.OBJ
COMPILER INVOKED BY: D:\Program\Keil\C51\BIN\C51.EXE Snake.c LARGE BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "Snake.h"
   2          
   3          void initSnake(Snake * snake)
   4          {
   5   1              Point p;
   6   1              p.x = 5;
   7   1              p.y = 6;
   8   1              (*snake)._direction = UP;
   9   1              (*snake)._length = 0;
  10   1              snakeSetHead(snake, p);
  11   1      }
  12          
  13          unsigned char snakeSetHead(Snake * snake, Point point)
  14          {
  15   1              if (snake == 0)
  16   1                      return 0;
  17   1              snakeAddBody(snake, point);
  18   1              return 1;
  19   1      }
  20          
  21          void snakeAddBody(Snake *snake, Point point)
  22          {
  23   1              (*snake)._body[(*snake)._length] = point;
  24   1              ++(*snake)._length;
  25   1      }
  26          
  27          Point * snakeGetHead(Snake * snake) { return &((*snake)._body[0]); }
  28          
  29          void snakeSetDir(Snake * snake, Direction dir) 
  30          { 
  31   1              if (((*snake)._direction == UP && dir == DOWN) ||
  32   1                      ((*snake)._direction == DOWN && dir == UP) ||
  33   1                      ((*snake)._direction == LEFT && dir == RIGHT) ||
  34   1                      ((*snake)._direction == RIGHT && dir == LEFT))
  35   1                      return;
  36   1              (*snake)._direction = dir; 
  37   1      }
  38          
  39          unsigned char snakeCollision(Snake *snake, Food *food)
  40          {
  41   1              unsigned char headX = (*snake)._body[0].x;
  42   1              unsigned char headY = (*snake)._body[0].y;
  43   1              unsigned char i = 1;
  44   1              if (food != 0)
  45   1                      if (headX == (*food).x && headY == (*food).y)
  46   1                      {
  47   2                              ++(*snake)._length;
  48   2                              foodEaten(food);
  49   2                              return 0;
  50   2                      }
  51   1      
  52   1              for (; i < (*snake)._length; ++i)
  53   1                      if (headX == (*snake)._body[i].x && headY == (*snake)._body[i].y)
  54   1                              return 1;
  55   1              return 0;
C51 COMPILER V9.01   SNAKE                                                                 05/24/2017 23:31:06 PAGE 2   

  56   1      }
  57          
  58          void snakeMove(Snake *snake)
  59          {
  60   1              unsigned char i = (*snake)._length - 1;
  61   1              for (; i >= 1; --i)
  62   1              {
  63   2                      (*snake)._body[i] = (*snake)._body[i - 1];
  64   2                      updateRedMat((*snake)._body[i]);
  65   2              }
  66   1      
  67   1              snakeHeadMove(snake);
  68   1      }
  69          
  70          
  71          void snakeHeadMove(Snake *snake)
  72          {
  73   1              Point * p = &(*snake)._body[0];
  74   1              Direction dir = (*snake)._direction;
  75   1      
  76   1              switch (dir)
  77   1              {
  78   2              case(UP):
  79   2              {
  80   3                      (*p).y = (*p).y == 1 ? 8 : (*p).y - 1;
  81   3                      break;
  82   3              }
  83   2              case(DOWN):
  84   2              {
  85   3                      (*p).y = (*p).y == 8 ? 1 : (*p).y + 1;
  86   3                      break;
  87   3              }
  88   2              case(LEFT):
  89   2              {
  90   3                      (*p).x = (*p).x == 1 ? 8 : (*p).x - 1;
  91   3                      break;
  92   3              }
  93   2              case(RIGHT):
  94   2              {
  95   3                      (*p).x = (*p).x == 8 ? 1 : (*p).x + 1;
  96   3                      break;
  97   3              }
  98   2              default:
  99   2                      break;
 100   2              }
 101   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    774    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      31
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
